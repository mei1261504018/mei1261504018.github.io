<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-25T06:35:19.126Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git操作</title>
    <link href="http://yoursite.com/2019/12/25/git%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/12/25/git%E6%93%8D%E4%BD%9C/</id>
    <published>2019-12-25T06:35:19.126Z</published>
    <updated>2019-12-25T06:35:19.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git的基本使用"><a href="#git的基本使用" class="headerlink" title="git的基本使用"></a>git的基本使用</h1><hr><h2 id="git-基本概念"><a href="#git-基本概念" class="headerlink" title="git 基本概念"></a>git 基本概念</h2><p>1、<strong>仓库（repository）</strong></p><ul><li>仓库用来存放项目代码。每一个项目都需要一个仓库。</li></ul><p>2、<strong>收藏(Star)</strong></p><ul><li>收藏项目，方便下次查看</li></ul><p>3、<strong>复制克隆项目（Fork）</strong></p><ul><li><p>在自己的空间下，复制生成一个仓库。<em>forked from</em>标识谁的仓库</p></li><li><p>该项目是独立存在的</p></li><li><p>当原仓库的文件经过修改后，自己的仓库不会更新</p></li></ul><p>4、<strong>pull request</strong>-发起请求</p><ul><li>更新源文件升级源文件，并推送给源仓库的管理者，当管理者查询管理后，合并到新的源文件仓库中</li></ul><p>5、<strong>Watch</strong>（关注）</p><ul><li>类似于关注，关注的项目更新后，会收到信息</li></ul><p>6、<strong>Issue</strong>(事务管理)</p><ul><li>类似于讨论区</li></ul><h2 id="git的原理"><a href="#git的原理" class="headerlink" title="git的原理"></a>git的原理</h2><h2 id="git仓库的前期准备"><a href="#git仓库的前期准备" class="headerlink" title="git仓库的前期准备"></a>git仓库的前期准备</h2><ol><li><p>在git官网下新建自己的仓库。</p></li><li><p>在本地电脑选取一个文件夹，进入cmd模式</p></li><li><p>开始底下的步骤</p></li></ol><h2 id="使用git步骤"><a href="#使用git步骤" class="headerlink" title="使用git步骤"></a>使用git步骤</h2><blockquote><p><strong>git status  可以查看当前的文件状态</strong></p></blockquote><ol><li>git init //初始化仓库</li></ol><ol start="2"><li><p>git add . (.表示所有文件) //添加文件到本地仓库</p></li><li><p>git commit -m “first commit” //添加文件描述信息</p></li><li><p>git remote add origin + 远程仓库(如GitHub)地址 //链接远程仓库，创建主分支</p></li><li><p>git pull origin master // 把本地仓库的变化连接到远程仓库主分支</p></li><li><p>git push -u origin master //把本地仓库的文件推送到远程仓库</p></li></ol><p>###Git提交的各种报错及解决网址</p><ol><li><p>当进行git pull命令时是出现 fatal: refusing to merge unrelated histories</p><p> <img alt="sds" data-src="https://github.com/mei1261504018/photo12121/blob/master/01.png" class="lazyload"> </p><blockquote><p>原因：出现这个问题的最主要原因还是在于本地仓库和远程仓库实际上是独立的两个仓库。需要 &gt;git pull origin master –allow-unrelated-histories 将远程仓库的文件拉取到本地仓库，接着将本地仓库的提交推送到远程github仓库上，&gt;git push origin master:master（下图）</p></blockquote><blockquote><p>解决方法：命令行 <strong>git push -u origin master</strong> //把本地仓库的文件推送到远程仓库</p></blockquote><p> <img alt="sds" data-src="https://github.com/mei1261504018/photo12121/blob/master/01.png" class="lazyload"></p></li></ol><ol start="2"><li><p>在<a href="https://jingyan.baidu.com/article/49ad8bce2cb8eb1835d8fa4e.html" target="_blank" rel="noopener">nothing to commit,working tree clean</a></p><p> <img alt="sds" data-src="https://github.com/mei1261504018/photo12121/blob/master/01.png" class="lazyload"></p><blockquote></blockquote></li></ol><ol start="3"><li><p><a href="https://www.jianshu.com/p/c86e52a1dbaa" target="_blank" rel="noopener">set-upstream origin master</a></p></li><li><p><a href="https://blog.csdn.net/zyz00000000/article/details/84402189" target="_blank" rel="noopener">master -&gt; master (non-fast-forward)</a></p></li><li><p>failed to push some refs to ‘<a href="https://github.com/mei12&#39;" target="_blank" rel="noopener">https://github.com/mei12&#39;</a></p></li></ol><p><img alt="sds" data-src="https://github.com/mei1261504018/photo12121/blob/master/01.png" class="lazyload"></p><pre><code>&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git的基本使用&quot;&gt;&lt;a href=&quot;#git的基本使用&quot; class=&quot;headerlink&quot; title=&quot;git的基本使用&quot;&gt;&lt;/a&gt;git的基本使用&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;git-基本概念&quot;&gt;&lt;a href=&quot;#git-基本概念&quot; class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>git操作的错题集锦</title>
    <link href="http://yoursite.com/2019/12/23/git%E6%93%8D%E4%BD%9C%E7%9A%84%E9%94%99%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <id>http://yoursite.com/2019/12/23/git%E6%93%8D%E4%BD%9C%E7%9A%84%E9%94%99%E9%A2%98%E9%9B%86%E9%94%A6/</id>
    <published>2019-12-23T09:05:20.171Z</published>
    <updated>2019-12-25T06:34:16.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git的基本使用"><a href="#git的基本使用" class="headerlink" title="git的基本使用"></a>git的基本使用</h1><hr><h2 id="git-基本概念"><a href="#git-基本概念" class="headerlink" title="git 基本概念"></a>git 基本概念</h2><p>1、<strong>仓库（repository）</strong></p><ul><li>仓库用来存放项目代码。每一个项目都需要一个仓库。</li></ul><p>2、<strong>收藏(Star)</strong></p><ul><li>收藏项目，方便下次查看</li></ul><p>3、<strong>复制克隆项目（Fork）</strong></p><ul><li><p>在自己的空间下，复制生成一个仓库。<em>forked from</em>标识谁的仓库</p></li><li><p>该项目是独立存在的</p></li><li><p>当原仓库的文件经过修改后，自己的仓库不会更新</p></li></ul><p>4、<strong>pull request</strong>-发起请求</p><ul><li>更新源文件升级源文件，并推送给源仓库的管理者，当管理者查询管理后，合并到新的源文件仓库中</li></ul><p>5、<strong>Watch</strong>（关注）</p><ul><li>类似于关注，关注的项目更新后，会收到信息</li></ul><p>6、<strong>Issue</strong>(事务管理)</p><ul><li>类似于讨论区</li></ul><h2 id="git的原理"><a href="#git的原理" class="headerlink" title="git的原理"></a>git的原理</h2><h2 id="git仓库的前期准备"><a href="#git仓库的前期准备" class="headerlink" title="git仓库的前期准备"></a>git仓库的前期准备</h2><ol><li><p>在git官网下新建自己的仓库。</p></li><li><p>在本地电脑选取一个文件夹，进入cmd模式</p></li><li><p>开始底下的步骤</p></li></ol><h2 id="使用git步骤"><a href="#使用git步骤" class="headerlink" title="使用git步骤"></a>使用git步骤</h2><blockquote><p><strong>git status  可以查看当前的文件状态</strong></p></blockquote><ol><li>git init //初始化仓库</li></ol><ol start="2"><li><p>git add . (.表示所有文件) //添加文件到本地仓库</p></li><li><p>git commit -m “first commit” //添加文件描述信息</p></li><li><p>git remote add origin + 远程仓库(如GitHub)地址 //链接远程仓库，创建主分支</p></li><li><p>git pull origin master // 把本地仓库的变化连接到远程仓库主分支</p></li><li><p>git push -u origin master //把本地仓库的文件推送到远程仓库</p></li></ol><p>###Git提交的各种报错及解决网址</p><ol><li><p>当进行git pull命令时是出现 fatal: refusing to merge unrelated histories</p><p> <img alt="sds" data-src="https://github.com/mei1261504018/photo12121/blob/master/01.png" class="lazyload"> </p><blockquote><p>原因：出现这个问题的最主要原因还是在于本地仓库和远程仓库实际上是独立的两个仓库。需要 &gt;git pull origin master –allow-unrelated-histories 将远程仓库的文件拉取到本地仓库，接着将本地仓库的提交推送到远程github仓库上，&gt;git push origin master:master（下图）</p></blockquote><blockquote><p>解决方法：命令行 <strong>git push -u origin master</strong> //把本地仓库的文件推送到远程仓库</p></blockquote><p> <img alt="sds" data-src="https://github.com/mei1261504018/photo12121/blob/master/01.png" class="lazyload"></p></li></ol><ol start="2"><li><p>在<a href="https://jingyan.baidu.com/article/49ad8bce2cb8eb1835d8fa4e.html" target="_blank" rel="noopener">nothing to commit,working tree clean</a></p><p> <img alt="sds" data-src="https://github.com/mei1261504018/photo12121/blob/master/01.png" class="lazyload"></p><blockquote></blockquote></li></ol><ol start="3"><li><p><a href="https://www.jianshu.com/p/c86e52a1dbaa" target="_blank" rel="noopener">set-upstream origin master</a></p></li><li><p><a href="https://blog.csdn.net/zyz00000000/article/details/84402189" target="_blank" rel="noopener">master -&gt; master (non-fast-forward)</a></p></li><li><p>failed to push some refs to ‘<a href="https://github.com/mei12&#39;" target="_blank" rel="noopener">https://github.com/mei12&#39;</a></p></li></ol><p><img alt="sds" data-src="https://github.com/mei1261504018/photo12121/blob/master/01.png" class="lazyload"></p><pre><code>&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git的基本使用&quot;&gt;&lt;a href=&quot;#git的基本使用&quot; class=&quot;headerlink&quot; title=&quot;git的基本使用&quot;&gt;&lt;/a&gt;git的基本使用&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;git-基本概念&quot;&gt;&lt;a href=&quot;#git-基本概念&quot; class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>静态资源文件导入IDEA工具</title>
    <link href="http://yoursite.com/2019/12/18/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5IDEA%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2019/12/18/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5IDEA%E5%B7%A5%E5%85%B7/</id>
    <published>2019-12-18T01:14:34.766Z</published>
    <updated>2019-12-18T01:24:37.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态资源文件，如css，html怎样导入IDEA中的开发工具中。"><a href="#静态资源文件，如css，html怎样导入IDEA中的开发工具中。" class="headerlink" title="静态资源文件，如css，html怎样导入IDEA中的开发工具中。"></a>静态资源文件，如css，html怎样导入IDEA中的开发工具中。</h1><hr><p>使用 idea 开发 springboot 项目过程中，遇到关于 静态资源 引用时出现的路径问题。完整的项目目录是这样的<br>导入图片</p><p>static 目录下是存放一些静态资源 （js、css、图片等）， </p><p>templates 目录下存放HTML文件。<br>目前遇到的问题是在 templates 目录下的html 文件中引入 static 目录下的静态资源时的路径问题， </p><p>下面我们看看具体的解决方法：</p><ol><li><p>首先你的项目中导入thymeleaf 的jar包（我使用的是gradle 包管理器）：</p><blockquote></blockquote><p>compile group: ‘org.springframework.boot’, name: ‘spring-boot-starter-thymeleaf’</p></li><li><p>配置问题添加如下代码（我使用的是application.yml）：</p><blockquote><p>spring:<br>mvc:</p><pre><code>view:  prefix: /templates/  suffix: .htmlstatic-path-pattern: /**</code></pre></blockquote></li><li><p>html 文件中导入静态资源：</p><p> 导入图片</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;静态资源文件，如css，html怎样导入IDEA中的开发工具中。&quot;&gt;&lt;a href=&quot;#静态资源文件，如css，html怎样导入IDEA中的开发工具中。&quot; class=&quot;headerlink&quot; title=&quot;静态资源文件，如css，html怎样导入IDEA中的开发
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2019/12/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/12/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-12-17T07:42:05.973Z</published>
    <updated>2019-12-25T10:00:57.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的第一篇博客–关于怎么搭建静态博客hexo"><a href="#我的第一篇博客–关于怎么搭建静态博客hexo" class="headerlink" title="我的第一篇博客–关于怎么搭建静态博客hexo"></a>我的第一篇博客–关于怎么搭建静态博客hexo</h1><hr><h2 id="安装前的工具"><a href="#安装前的工具" class="headerlink" title="安装前的工具"></a>安装前的工具</h2><pre><code>-git         --是一个网上仓库     -node.js      --Node 是一个让 JavaScript 运行在服务端的开发平台（我理解就是一个html环境）-hexo          --是一个轻量级博客框架</code></pre><br><p>#1. 安装步骤</p><h3 id="1-nodej-js-下载并安装"><a href="#1-nodej-js-下载并安装" class="headerlink" title="1. nodej.js 下载并安装"></a>1. nodej.js 下载并安装</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node官方链接地址</a> :<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a>  网页打开下载，并傻瓜式安装</p><p><img alt="node.js" title="node" data-src="%E7%85%A7%E7%89%871.png" class="lazyload"></p><pre><code>安装完成后有两个组件node.js 文件本身npm  包管理器--搭建博客必须的东西</code></pre><hr><h3 id="2-npm环境配置"><a href="#2-npm环境配置" class="headerlink" title="2. npm环境配置"></a>2. npm环境配置</h3><p>在com窗口（黑窗口）下，进行下面的命令行看npm是否成功，如不成功，返回步骤1</p><pre><code>查看node版本： node -v查看npm版本：  npm -v</code></pre><h3 id="3-安装cnpm"><a href="#3-安装cnpm" class="headerlink" title="3. 安装cnpm"></a>3. 安装cnpm</h3><blockquote><p><strong>npm是针对国外地址的下载的工具，速度很慢。所以通过npm安装一个国内的镜像安装工具cnpm。后面的操作可以通过cnpm操作，但实际上npm跟cnpm的作用是一样的。安装指令如下</strong></p></blockquote><pre><code>&gt;npm install -g cnpm --registry=http://registry.npm.taobao.org</code></pre><p>安装成功后，黑窗口检测cnpm版本，可以查看是否安装成功。</p><pre><code>&gt;cnpm -v</code></pre><h3 id="4-用cnpm安装进行安装hexo"><a href="#4-用cnpm安装进行安装hexo" class="headerlink" title="4. 用cnpm安装进行安装hexo"></a>4. 用cnpm安装进行安装hexo</h3><blockquote><p><strong>cnpm 安装成功后，开始下载hexo框架的</strong></p></blockquote><pre><code>&gt;cnpm install -g hexo-cli</code></pre><p>安装成功后，验证是否成功，有版本好则安装成功</p><pre><code>&gt;hexo -v</code></pre><p>出现版本号，及验证成功<br><br></p><hr><h1 id="2-开始搭建hexo博客系统"><a href="#2-开始搭建hexo博客系统" class="headerlink" title="2. 开始搭建hexo博客系统"></a>2. 开始搭建hexo博客系统</h1><h3 id="1-新建一个文件夹“mblog”-（文件夹名字随便），这个文件夹的作用就是，以后的hexo所有的文件。包括hexo配置设置、博客内容的储存等。出现错误可以删除这个文件夹，从上面重新来"><a href="#1-新建一个文件夹“mblog”-（文件夹名字随便），这个文件夹的作用就是，以后的hexo所有的文件。包括hexo配置设置、博客内容的储存等。出现错误可以删除这个文件夹，从上面重新来" class="headerlink" title="1. 新建一个文件夹“mblog” （文件夹名字随便），这个文件夹的作用就是，以后的hexo所有的文件。包括hexo配置设置、博客内容的储存等。出现错误可以删除这个文件夹，从上面重新来"></a>1. 新建一个文件夹“mblog” （文件夹名字随便），这个文件夹的作用就是，以后的hexo所有的文件。包括hexo配置设置、博客内容的储存等。出现错误可以删除这个文件夹，从上面重新来</h3><pre><code>新建文件夹方式一:通过cmd窗口   &gt;mkdir 文件名方式二：自己在文件夹任意位置。 </code></pre><h3 id="2-初始化一个博客"><a href="#2-初始化一个博客" class="headerlink" title="2. 初始化一个博客"></a>2. 初始化一个博客</h3><p>打开cmd窗口，进入之前新键的“blog”包下，进行网上资源的下载</p><pre><code>hexo init</code></pre><p>成功后打开文件夹，文件夹下就会有下载好的hexo框架的相关内容</p><h3 id="3-启动hexo博客的预览模式"><a href="#3-启动hexo博客的预览模式" class="headerlink" title="3. 启动hexo博客的预览模式"></a>3. 启动hexo博客的预览模式</h3><pre><code>&gt;hexo s:  </code></pre><p>端口号启动,网页打开端口号，就会看见默认生成的博客文章<br><br></p><hr><h1 id="3-编写、更新维护博客内容"><a href="#3-编写、更新维护博客内容" class="headerlink" title="3.编写、更新维护博客内容"></a>3.编写、更新维护博客内容</h1><h3 id="1-博客文件的建立"><a href="#1-博客文件的建立" class="headerlink" title="1. 博客文件的建立"></a>1. 博客文件的建立</h3><blockquote><p><strong>方式一</strong>：在mblog目标文件夹下，找到\source_posts位置。<br> ** _post ** 文件夹下的以 .md后缀名生成的文件就是自己的博客。<br>新建以.md文件，用note++、markdoem文件编辑器编辑，保存成功</p></blockquote><blockquote><p><strong>方式二</strong>：控制台输出<br>新建一个文档标题，内容为空打开文档，在tags下编辑内容。<br>hexo n “文章标题”</p></blockquote><ul><li><strong>(进行方式二的时候需要停止掉hexo，否则控制台输出不了。 CTRL+c退出预览模式后再进行编辑。)</strong></li></ul><h3 id="2-更新博客"><a href="#2-更新博客" class="headerlink" title="2. 更新博客"></a>2. 更新博客</h3><p>当重新新建博客文件时候</p><blockquote><p>控制台博文清理：    </p></blockquote><pre><code>hexo clean</code></pre><blockquote><p>博文生成：</p></blockquote><pre><code>&gt;hexo g（generate） </code></pre><blockquote><p>hexo重现启动：</p></blockquote><pre><code>&gt;hexo s</code></pre><p>然后默认网址输出就可以了<br><br></p><hr><h1 id="功能强化1—部署到免费的服务器"><a href="#功能强化1—部署到免费的服务器" class="headerlink" title="功能强化1—部署到免费的服务器"></a>功能强化1—部署到免费的服务器</h1><blockquote><p>为什么搭建到免费的平台上<br>在我们自己未搭建时，每次使用都需要hexo s命令部署.当搭建到免费的平台仓库后，可以直接打开地址访问博客。 这里访问的博客内容是最后一个部署的内容，如果想更新就得更新部署</p></blockquote><h2 id="github平台的部署"><a href="#github平台的部署" class="headerlink" title="github平台的部署"></a>github平台的部署</h2><h3 id="1-构建仓库"><a href="#1-构建仓库" class="headerlink" title="1. 构建仓库"></a>1. 构建仓库</h3><blockquote><p>登录GitHub官网，新建仓库。仓库名称“自己的昵称”.github.io    ,作为一个空仓库。用来保存后期上传hexo文件</p></blockquote><h3 id="2-git环境搭建"><a href="#2-git环境搭建" class="headerlink" title="2. git环境搭建"></a>2. git环境搭建</h3><blockquote><p>在cmd窗口的hexo文件夹目录下部署git，我的是mblog文件夹下</p></blockquote><pre><code>&gt;cnpm install --save hexo-deployer-git</code></pre><p>安装成功后</p><h3 id="3-设置-config-yml文件的三个标签"><a href="#3-设置-config-yml文件的三个标签" class="headerlink" title="3. 设置_config.yml文件的三个标签:"></a>3. 设置_config.yml文件的三个标签:</h3><blockquote><p><strong>这个_config.yml文件 在之前自己设置hexo下载的文件夹下</strong></p></blockquote><pre><code>1、type：git     -类型2、repo:            -git仓库的地址3、breach:        -默认分支</code></pre><h3 id="4-部署到远端"><a href="#4-部署到远端" class="headerlink" title="4. 部署到远端"></a>4. 部署到远端</h3><pre><code>&gt;hexo d(deployer-部署)    </code></pre><h3 id="5-刷新、浏览器访问"><a href="#5-刷新、浏览器访问" class="headerlink" title="5. 刷新、浏览器访问"></a>5. 刷新、浏览器访问</h3><blockquote><p><strong>这里的浏览器地址就是之前参考设置的地址</strong><br><br></p></blockquote><hr><p>#功能强化2—hexo的主题修改</p><blockquote><p>可以根据自己的爱好修改喜欢的主题</p></blockquote><p>###1.下载主题：</p><blockquote><p>网上找到自己喜欢的hexo主题，<strong>克隆主题到theme文件夹下的yilia文件下</strong></p></blockquote><pre><code>git clone https://github.com/litten.hexo-theme-yilia.git   themes/yilia</code></pre><p>###2. 修改默认主题配置</p><blockquote><p>下载成功后，进入yilia文件夹。找到_config.yml文件找到<strong>theme</strong>标签修改默认 theme：主题名</p></blockquote><p>###3. 控制台部署</p><blockquote><p><strong>hexo清除</strong></p></blockquote><pre><code>&gt;hexo c</code></pre><blockquote><p><strong>生成</strong></p></blockquote><pre><code>&gt;hexo g</code></pre><blockquote><p><strong>启动</strong></p></blockquote><pre><code>&gt;hexo s</code></pre><blockquote><p><strong>网页更新</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我的第一篇博客–关于怎么搭建静态博客hexo&quot;&gt;&lt;a href=&quot;#我的第一篇博客–关于怎么搭建静态博客hexo&quot; class=&quot;headerlink&quot; title=&quot;我的第一篇博客–关于怎么搭建静态博客hexo&quot;&gt;&lt;/a&gt;我的第一篇博客–关于怎么搭建静态博客he
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>动态博客日常笔记</title>
    <link href="http://yoursite.com/2019/12/12/%E5%8A%A8%E6%80%81%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/12/12/%E5%8A%A8%E6%80%81%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-12T12:18:37.549Z</published>
    <updated>2019-12-13T04:41:14.923Z</updated>
    
    <content type="html"><![CDATA[<p>###数据库<br>1.t_blogger</p><pre><code>create table t_blogger(id INT(10) PRIMARY KEY COMMENT&quot;主键id&quot;,userName varchar(50) COMMENT&quot;登录名&quot;,passWord VARCHAR(50) COMMENT&quot;登录密码&quot;,profile LONGTEXT  COMMENT&quot;个人信息&quot;,nickName varchar(50) COMMENT&quot;昵称&quot;,sing varchar(100) COMMENT&quot;个性签名&quot;,imageName VARCHAR(100) COMMENT&quot;头像地址&quot;)COMMENT &quot;博主&quot;;</code></pre><p>###2.dsd</p><blockquote><p>woeqmsdamdaldma;ldoajod</p></blockquote><figure class="highlight plain"><figcaption><span>`sadada`</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   create table t_blogger(</span><br><span class="line">id INT(10) PRIMARY KEY COMMENT&quot;主键id&quot;,</span><br><span class="line">userName varchar(50) COMMENT&quot;登录名&quot;,</span><br><span class="line">passWord VARCHAR(50) COMMENT&quot;登录密码&quot;,</span><br><span class="line">profile LONGTEXT  COMMENT&quot;个人信息&quot;,</span><br><span class="line">nickName varchar(50) COMMENT&quot;昵称&quot;,</span><br><span class="line">sing varchar(100) COMMENT&quot;个性签名&quot;,</span><br><span class="line">imageName VARCHAR(100) COMMENT&quot;头像地址&quot;</span><br><span class="line">)COMMENT &quot;博主&quot;;</span><br></pre></td></tr></table></figure><p><code>this is posdadaddsdasdadlpdal[dlap[            da,da,dasd,;a,d;a,;da&#39;d;&#39;</code> </p><p><a href="https://www.jianshu.com" target="_blank" rel="noopener" title="创作你的创作">简书</a> 是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。</p><p><a href="(https://www.baidu.com)">简书</a>： 是一个创作社区,任何人均可以在其上进行创作。用户在简书上面可以方便的创作自己的作品,互相交流。</p><p><del>~ ‘dsad ‘ ~</del></p><p><del>删除</del></p><p><del>~ 删除 ~</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###数据库&lt;br&gt;1.t_blogger&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;create table t_blogger(
id INT(10) PRIMARY KEY COMMENT&amp;quot;主键id&amp;quot;,
userName varchar(50) COMMENT
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>markdown2语法介绍</title>
    <link href="http://yoursite.com/2019/12/12/markdown2%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/12/12/markdown2%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</id>
    <published>2019-12-12T11:23:08.481Z</published>
    <updated>2019-12-24T02:56:50.394Z</updated>
    
    <content type="html"><![CDATA[<p>2.语法介绍</p><p>有了上面的配置，我们就可以开始markdown之旅了，但是没有语法，就没有漂亮的排版。<br>2.1 标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>2.2 列表</p><p>A.无序列表</p><pre><code>语法很简单，在文字前加上 - 或 * 即可。</code></pre><ul><li>我是第一行</li><li>我是第二行</li></ul><ul><li><p>我是第三行</p></li><li><p>我是第四行</p><p>  Tips：- * 等符号要和文字之间加上一个字符的空格！</p></li></ul><p>B.有序列表</p><pre><code>1.我是第三行2.我也是最帅的</code></pre><p>2.3 引用</p><pre><code>需要在文本前加入 &gt; 这种尖括号（大于号）即可</code></pre><blockquote><p>我一直在使用引用。<br>从开始到现在。</p></blockquote><pre><code>Tips： &gt;符号要和文字之间加上一个字符的空格！而且是在英文输入法的条件下输入！</code></pre><p>2.4 图片和链接</p><pre><code>插入链接与插入图片的语法很像，区别在一个 !号</code></pre><p>图片为：<img alt data-src class="lazyload"> 举例：<img alt="美女矢量素材" data-src="https://i.imgur.com/lPKrI8e.png" class="lazyload"></p><p>链接为：<a href></a>  举例：<a href="https://i.imgur.com/lPKrI8e.png">美女矢量素材</a></p><p>图片举例：<br>美女矢量素材</p><p>链接举例：美女矢量素材<br>2.5 粗体与斜体</p><pre><code>Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。例如：这里是粗体 这里是斜体</code></pre><p>粗体  举例：<strong>粗体</strong><br>斜体  举例：<em>斜体</em></p><p>2.6 表格</p><pre><code>说明：表头1     表头2     表头3居左     居中     居右</code></pre><p>举例：</p><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td align="center">right-aligned</td><td align="right">$1600</td></tr><tr><td>col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td>zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><p>效果如下：<br>Tables     Are     Cool<br>col 3 is     right-aligned     $1600<br>col 2 is     centered     $12<br>zebra stripes     are neat     $1</p><p>示例表格转换成html代码就是这样</p><table>    <thead>    <tr>        <th>Tables</th>        <th style="text-align:center">Are</th>        <th style="text-align:right">Cool</th>        </tr>    </thead>    <tbody>    <tr>        <td>col 3 is</td>        <td style="text-align:center">right-aligned</td>        <td style="text-align:right">$1600</td>    </tr>    <tr>        <td>col 2 is</td>        <td style="text-align:center">centered</td>        <td style="text-align:right">$12</td>    </tr>    <tr>        <td>zebra stripes</td>        <td style="text-align:center">are neat</td>        <td style="text-align:right">$1</td>    </tr>    </tbody></table><pre><code>1234567891011121314151617181920212223242526</code></pre><p>2.7 代码框</p><pre><code>连续三个反引号`，就是按键1前面的那个符号再加代码类型.package com.hkteam.hk.ui;import com.hkteam.hk.R;import android.os.Bundle;public class AboutHkActivity extends BaseActivity{    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_about_hk);    }}1234567891011121314</code></pre><p>效果如下：</p><pre><code>package com.hkteam.hk.ui;import com.hkteam.hk.R;import android.os.Bundle;public class AboutHkActivity extends BaseActivity{    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_about_hk);    }}1234567891011121314</code></pre><p>2.8 横线</p><pre><code>分割线的语法只需要三个 * 号。</code></pre><p>2.9 转义字符</p><p>\ 反斜杠<br>` 反引号<br>* 星号<br>_ 下划线<br>{} 大括号<br>[] 中括号<br>() 小括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号</p><p>效果如下：</p><pre><code>\ 反斜杠` 反引号* 星号_ 下划线{} 大括号[] 中括号() 小括号# 井号+ 加号- 减号. 英文句号! 感叹号</code></pre><p>2.10 快捷键</p><p>MarkdownPad 2 常用快捷键</p><p>Ctrl + I ： 斜体</p><p>Ctrl + B ： 粗体</p><p>Ctrl + G ： 图片</p><p>Ctrl + Q ： 引用</p><p>Ctrl + 1 ： 标题 1</p><p>Ctrl + 2 ： 标题 2</p><p>Ctrl + 3 ： 标题 3</p><p>Ctrl + K ： 代码块</p><p>Ctrl + L ： 超链接</p><p>Ctrl + T ： 时间戳</p><p>Ctrl + U ： 无序列表</p><p>Ctrl + R ： 水平标尺</p><p>F4 ： 启用水平布局</p><p>F5 ： 启用实时预览</p><p>F6 ： 在浏览器中预览</p><p>Ctrl + Shift + O ： 有序列表</p><p>　　<br>MarkDownPad 2的语法介绍完了，我们可以记住这些语法的使用方法。对于新手来说，多多练习就能完全掌握，也可以鼠标点击工具栏上的图标来帮助你完成写作；对于高手来说，键盘操作才是黑科技，那么记住这些快捷键是基本功。<br>3. 高级玩法<br>3.1 代码高亮</p><p>MarkDownPad 2 默认不会对代码块进行着色，要达到酷炫的代码高亮的效果，需要进行一些配置。</p><pre><code>进入markdownpad2》高级》工具》选项》高级》HTMLHead编辑器将如下代码粘贴进去</code></pre><link rel="stylesheet" href="https://cdn.bootcss.com/highlight.js/8.0/styles/solarized_dark.min.css"><script src="https://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script><script>hljs.initHighlightingOnLoad();</script><pre><code>123</code></pre><p>在编辑器中敲击代码在按F6在浏览器中打开，可看到代码高亮了<br>3.2 自定义样式表</p><p>MarkDownPad 2内置的样式表有：markdown.css 、none.css 、markdownpad-github.css、solarized-dark.css 、solarized-light.css</p><p>选择“工具——选项——样式表”可以看到样式表的设置界面 或“按F7——样式表”，如下图<br>　<br>样式表</p><p>上面列出的5种样式表，你都可以对它们进行编辑，修改为你想要的样式<br>也可以自定义添加样式表</p><pre><code>Tips：要修改样式表或自定义添加样式表，前提条件：学过html、css，具备修改css的能力</code></pre><p>3.3 快速高效的写出漂亮的API接口文档</p><pre><code>希望达到以下效果：</code></pre><p>样式表</p><p>例子完整内容</p><h2 id="得到博客文章的列表（有分页）"><a href="#得到博客文章的列表（有分页）" class="headerlink" title="得到博客文章的列表（有分页）"></a>得到博客文章的列表（有分页）</h2><h3 id="接口地址"><a href="#接口地址" class="headerlink" title="接口地址"></a>接口地址</h3><pre>http://www.dodobook.net/post/list</pre><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><pre>cate_id         分类ID Array（不传显示全部）  [1,3,6]page_num        当前页码（可不传）   默认 1page_size       每页记录数目（可不填） 默认 10</pre><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><pre style="background:#222;color:#35b558">total: 108,list: [    {        id: 2718,        cate_id: 2,        cate_name: "php",        view_cnt: "1005",        cate_name: "php",        name: "Yii2中配置使用连接多个数据库连接",        url: "http://www.dodobook.net/php/2718",        post_date: "2016-08-20 20:10:08",        img_logo: "/upload/img/aaa.png",    },    {        id: 2718,        cate_id: 2,        cate_name: "php",        view_cnt: "1005",        cate_name: "php",        name: "PHP实现网址短链接转换的方法",        url: "http://www.dodobook.net/php/2710",        post_date: "2016-08-16 20:10:08",        img_logo: "/upload/img/addsaafff.png",    }]</pre><pre><code>1234567891011121314151617181920212223242526272829303132333435363738394041424344</code></pre><p>高级玩法还有很多，更多的功能等待着大家去摸索去发现……<br>4. 总结</p><p>支持MarkDown语法写作的工具很多，还有很多支持在线编辑MarkDown语法的网站，选择一款适合自己的工具即可，好用高效才是王道!!!!!!<br>————————————————<br>版权声明：本文为CSDN博主「Cappuccinooo」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/kuangay/article/details/79854665" target="_blank" rel="noopener">https://blog.csdn.net/kuangay/article/details/79854665</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2.语法介绍&lt;/p&gt;
&lt;p&gt;有了上面的配置，我们就可以开始markdown之旅了，但是没有语法，就没有漂亮的排版。&lt;br&gt;2.1 标题&lt;/p&gt;
&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
